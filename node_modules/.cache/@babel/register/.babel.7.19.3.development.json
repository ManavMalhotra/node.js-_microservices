{"{\"assumptions\":{},\"sourceRoot\":\"/workspaces/node.js-_microservices/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/workspaces/node.js-_microservices\",\"filename\":\"/workspaces/node.js-_microservices/server.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/workspaces/node.js-_microservices\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.19.3:development":{"value":{"code":"import express from \"express\";\nimport dotenv from \"dotenv\";\nimport cors from \"cors\";\nimport compression from \"compression\";\nimport httpLogger from \"./middleware/morgan\";\nimport logger from \"./common/logger\";\nimport connectDB from \"./config/db\";\nimport routes from \"./routes\";\nconst app = express();\napp.use(httpLogger);\napp.use(compression({\n  filter: shouldCompress\n}));\n\nconst shouldCompress = (req, res) => {\n  if (req.headers['x-no-compression']) {\n    // don't compress responses with this request header\n    return false;\n  } // fallback to standard filter function\n\n\n  return compression.filter(req, res);\n};\n\ndotenv.config(); // Connect Database\n\nconnectDB(); // Init Middleware\n\napp.use(express.json({\n  extended: true\n}));\napp.use(cors());\napp.get(\"/\", (req, res) => res.send(\"API RUNNING\"));\nroutes(app);\nconst PORT = process.env.SERVER_PORT || 3009;\napp.listen(PORT, () => {\n  console.log(`SERVER STARTED ON PORT ${PORT}`);\n  logger.info(\"SERVER STARTED\");\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHByZXNzIiwiZG90ZW52IiwiY29ycyIsImNvbXByZXNzaW9uIiwiaHR0cExvZ2dlciIsImxvZ2dlciIsImNvbm5lY3REQiIsInJvdXRlcyIsImFwcCIsInVzZSIsImZpbHRlciIsInNob3VsZENvbXByZXNzIiwicmVxIiwicmVzIiwiaGVhZGVycyIsImNvbmZpZyIsImpzb24iLCJleHRlbmRlZCIsImdldCIsInNlbmQiLCJQT1JUIiwicHJvY2VzcyIsImVudiIsIlNFUlZFUl9QT1JUIiwibGlzdGVuIiwiY29uc29sZSIsImxvZyIsImluZm8iXSwic291cmNlUm9vdCI6Ii93b3Jrc3BhY2VzL25vZGUuanMtX21pY3Jvc2VydmljZXMvIiwic291cmNlcyI6WyJzZXJ2ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcbmltcG9ydCBkb3RlbnYgZnJvbSBcImRvdGVudlwiO1xuaW1wb3J0IGNvcnMgZnJvbSBcImNvcnNcIjtcbmltcG9ydCBjb21wcmVzc2lvbiBmcm9tIFwiY29tcHJlc3Npb25cIjtcblxuaW1wb3J0IGh0dHBMb2dnZXIgZnJvbSBcIi4vbWlkZGxld2FyZS9tb3JnYW5cIjtcbmltcG9ydCBsb2dnZXIgZnJvbSBcIi4vY29tbW9uL2xvZ2dlclwiO1xuaW1wb3J0IGNvbm5lY3REQiBmcm9tIFwiLi9jb25maWcvZGJcIjtcbmltcG9ydCByb3V0ZXMgZnJvbSBcIi4vcm91dGVzXCI7XG5cbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcblxuYXBwLnVzZShodHRwTG9nZ2VyKTtcblxuYXBwLnVzZShjb21wcmVzc2lvbih7IGZpbHRlcjogc2hvdWxkQ29tcHJlc3MgfSkpO1xuXG5jb25zdCBzaG91bGRDb21wcmVzcyA9IChyZXEsIHJlcykgPT4ge1xuICBpZiAocmVxLmhlYWRlcnNbJ3gtbm8tY29tcHJlc3Npb24nXSkge1xuICAgIC8vIGRvbid0IGNvbXByZXNzIHJlc3BvbnNlcyB3aXRoIHRoaXMgcmVxdWVzdCBoZWFkZXJcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIGZhbGxiYWNrIHRvIHN0YW5kYXJkIGZpbHRlciBmdW5jdGlvblxuICByZXR1cm4gY29tcHJlc3Npb24uZmlsdGVyKHJlcSwgcmVzKVxufVxuXG5kb3RlbnYuY29uZmlnKCk7XG5cbi8vIENvbm5lY3QgRGF0YWJhc2VcbmNvbm5lY3REQigpO1xuXG4vLyBJbml0IE1pZGRsZXdhcmVcbmFwcC51c2UoZXhwcmVzcy5qc29uKHsgZXh0ZW5kZWQ6IHRydWUgfSkpO1xuXG5hcHAudXNlKGNvcnMoKSk7XG5cbmFwcC5nZXQoXCIvXCIsIChyZXEsIHJlcykgPT4gcmVzLnNlbmQoXCJBUEkgUlVOTklOR1wiKSk7XG5cbnJvdXRlcyhhcHApO1xuXG5jb25zdCBQT1JUID0gcHJvY2Vzcy5lbnYuU0VSVkVSX1BPUlQgfHwgMzAwOTtcblxuYXBwLmxpc3RlbihQT1JULCAoKSA9PiB7XG4gIGNvbnNvbGUubG9nKGBTRVJWRVIgU1RBUlRFRCBPTiBQT1JUICR7UE9SVH1gKTtcbiAgbG9nZ2VyLmluZm8oXCJTRVJWRVIgU1RBUlRFRFwiKTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxPQUFQLE1BQW9CLFNBQXBCO0FBQ0EsT0FBT0MsTUFBUCxNQUFtQixRQUFuQjtBQUNBLE9BQU9DLElBQVAsTUFBaUIsTUFBakI7QUFDQSxPQUFPQyxXQUFQLE1BQXdCLGFBQXhCO0FBRUEsT0FBT0MsVUFBUCxNQUF1QixxQkFBdkI7QUFDQSxPQUFPQyxNQUFQLE1BQW1CLGlCQUFuQjtBQUNBLE9BQU9DLFNBQVAsTUFBc0IsYUFBdEI7QUFDQSxPQUFPQyxNQUFQLE1BQW1CLFVBQW5CO0FBRUEsTUFBTUMsR0FBRyxHQUFHUixPQUFPLEVBQW5CO0FBRUFRLEdBQUcsQ0FBQ0MsR0FBSixDQUFRTCxVQUFSO0FBRUFJLEdBQUcsQ0FBQ0MsR0FBSixDQUFRTixXQUFXLENBQUM7RUFBRU8sTUFBTSxFQUFFQztBQUFWLENBQUQsQ0FBbkI7O0FBRUEsTUFBTUEsY0FBYyxHQUFHLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjO0VBQ25DLElBQUlELEdBQUcsQ0FBQ0UsT0FBSixDQUFZLGtCQUFaLENBQUosRUFBcUM7SUFDbkM7SUFDQSxPQUFPLEtBQVA7RUFDRCxDQUprQyxDQU1uQzs7O0VBQ0EsT0FBT1gsV0FBVyxDQUFDTyxNQUFaLENBQW1CRSxHQUFuQixFQUF3QkMsR0FBeEIsQ0FBUDtBQUNELENBUkQ7O0FBVUFaLE1BQU0sQ0FBQ2MsTUFBUCxHLENBRUE7O0FBQ0FULFNBQVMsRyxDQUVUOztBQUNBRSxHQUFHLENBQUNDLEdBQUosQ0FBUVQsT0FBTyxDQUFDZ0IsSUFBUixDQUFhO0VBQUVDLFFBQVEsRUFBRTtBQUFaLENBQWIsQ0FBUjtBQUVBVCxHQUFHLENBQUNDLEdBQUosQ0FBUVAsSUFBSSxFQUFaO0FBRUFNLEdBQUcsQ0FBQ1UsR0FBSixDQUFRLEdBQVIsRUFBYSxDQUFDTixHQUFELEVBQU1DLEdBQU4sS0FBY0EsR0FBRyxDQUFDTSxJQUFKLENBQVMsYUFBVCxDQUEzQjtBQUVBWixNQUFNLENBQUNDLEdBQUQsQ0FBTjtBQUVBLE1BQU1ZLElBQUksR0FBR0MsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFdBQVosSUFBMkIsSUFBeEM7QUFFQWYsR0FBRyxDQUFDZ0IsTUFBSixDQUFXSixJQUFYLEVBQWlCLE1BQU07RUFDckJLLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLDBCQUF5Qk4sSUFBSyxFQUEzQztFQUNBZixNQUFNLENBQUNzQixJQUFQLENBQVksZ0JBQVo7QUFDRCxDQUhEIn0=","map":{"version":3,"names":["express","dotenv","cors","compression","httpLogger","logger","connectDB","routes","app","use","filter","shouldCompress","req","res","headers","config","json","extended","get","send","PORT","process","env","SERVER_PORT","listen","console","log","info"],"sourceRoot":"/workspaces/node.js-_microservices/","sources":["server.js"],"sourcesContent":["import express from \"express\";\nimport dotenv from \"dotenv\";\nimport cors from \"cors\";\nimport compression from \"compression\";\n\nimport httpLogger from \"./middleware/morgan\";\nimport logger from \"./common/logger\";\nimport connectDB from \"./config/db\";\nimport routes from \"./routes\";\n\nconst app = express();\n\napp.use(httpLogger);\n\napp.use(compression({ filter: shouldCompress }));\n\nconst shouldCompress = (req, res) => {\n  if (req.headers['x-no-compression']) {\n    // don't compress responses with this request header\n    return false\n  }\n\n  // fallback to standard filter function\n  return compression.filter(req, res)\n}\n\ndotenv.config();\n\n// Connect Database\nconnectDB();\n\n// Init Middleware\napp.use(express.json({ extended: true }));\n\napp.use(cors());\n\napp.get(\"/\", (req, res) => res.send(\"API RUNNING\"));\n\nroutes(app);\n\nconst PORT = process.env.SERVER_PORT || 3009;\n\napp.listen(PORT, () => {\n  console.log(`SERVER STARTED ON PORT ${PORT}`);\n  logger.info(\"SERVER STARTED\");\n});\n"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AAEA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,MAAMC,GAAG,GAAGR,OAAO,EAAnB;AAEAQ,GAAG,CAACC,GAAJ,CAAQL,UAAR;AAEAI,GAAG,CAACC,GAAJ,CAAQN,WAAW,CAAC;EAAEO,MAAM,EAAEC;AAAV,CAAD,CAAnB;;AAEA,MAAMA,cAAc,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;EACnC,IAAID,GAAG,CAACE,OAAJ,CAAY,kBAAZ,CAAJ,EAAqC;IACnC;IACA,OAAO,KAAP;EACD,CAJkC,CAMnC;;;EACA,OAAOX,WAAW,CAACO,MAAZ,CAAmBE,GAAnB,EAAwBC,GAAxB,CAAP;AACD,CARD;;AAUAZ,MAAM,CAACc,MAAP,G,CAEA;;AACAT,SAAS,G,CAET;;AACAE,GAAG,CAACC,GAAJ,CAAQT,OAAO,CAACgB,IAAR,CAAa;EAAEC,QAAQ,EAAE;AAAZ,CAAb,CAAR;AAEAT,GAAG,CAACC,GAAJ,CAAQP,IAAI,EAAZ;AAEAM,GAAG,CAACU,GAAJ,CAAQ,GAAR,EAAa,CAACN,GAAD,EAAMC,GAAN,KAAcA,GAAG,CAACM,IAAJ,CAAS,aAAT,CAA3B;AAEAZ,MAAM,CAACC,GAAD,CAAN;AAEA,MAAMY,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,WAAZ,IAA2B,IAAxC;AAEAf,GAAG,CAACgB,MAAJ,CAAWJ,IAAX,EAAiB,MAAM;EACrBK,OAAO,CAACC,GAAR,CAAa,0BAAyBN,IAAK,EAA3C;EACAf,MAAM,CAACsB,IAAP,CAAY,gBAAZ;AACD,CAHD"}},"mtime":1685027371594}}